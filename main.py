#########################################
#–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import datetime
import json
import random
import sqlite3
import time
import telebot

from Cards import *
from telebot import types
from CAC import *
from Config import Bot_Token as token
##########################################
#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(token)
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥

@bot.message_handler(commands=['notic'])
def notic(message):
    if message.from_user.id == 5027089008:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = sqlite3.connect("db.db")
        cursor = db.cursor()
        # –ó–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞
        l = 0
        cursor.execute(f"SELECT user_id FROM users")
        for id in cursor.fetchall():
            try:
                bot.send_message(id[0],message.text[7:], parse_mode="HTML", disable_web_page_preview=True)
            except:
                l+=1
        print(l)
        db.close()
@bot.message_handler(commands=['stat'])
def notic(message):
    if message.from_user.id == 5027089008:
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = sqlite3.connect("db.db")
        cursor = db.cursor()
        # –ó–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞
        s = cursor.execute(f"SELECT id FROM users").fetchall()
        bot.send_message(message.chat.id,f"–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ - {len(s)}", parse_mode="HTML", disable_web_page_preview=True)
        db.close()
@bot.message_handler(commands=['notict'])
def notic(message):
    if message.from_user.id == 5027089008:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = sqlite3.connect("db.db")
        cursor = db.cursor()
        # –ó–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞
        cursor.execute(f"SELECT user_id FROM users")
        bot.send_message(message.chat.id,message.text[8:], parse_mode="HTML",disable_web_page_preview=True)
        db.close()
@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.type == 'private':
        page = 1
        #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = sqlite3.connect("db.db")
        cursor = db.cursor()
        #–ó–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞
        cursor.execute(f"SELECT user_id FROM users WHERE user_id = {message.from_user.id}")
        if cursor.fetchone() == None:
            cursor.execute(f"INSERT INTO users(user_id,username) VALUES({message.from_user.id},'{bot.get_chat_member(message.from_user.id,message.from_user.id).user.username}') ;")
            db.commit()
        #–ö–Ω–æ–ø–∫–∏ –±–æ—Ç–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üÉè | –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
        btn2 = types.KeyboardButton("üìì | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        btn3 = types.KeyboardButton("üòé | –¢–æ–ø –∏–≥—Ä–æ–∫–∏")
#        btn4 = types.KeyboardButton("üë• | –ö–ª–∞–Ω")
        btn5 = types.KeyboardButton("üõí | –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω")
        markup.add(btn1,btn2,btn3,btn5)
        #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(message.chat.id,
                         text='<b>‚úåÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AnimeCards.</b>\n\nüìù –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"üÉè | –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É"</b>.\n\nüì° –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ <b>"üìì | –ö–æ–ª–æ–¥–∞"</b>.\n\nüîé –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º –∏–≥—Ä–æ–∫–æ–º <b>"üòé | –¢–æ–ø –∏–≥—Ä–æ–∫–∏"</b>.\n\n  <b><a href = "https://t.me/anicrd">–ß–∞—Ç</a> | <a href = "https://t.me/anicrds">–ù–æ–≤–æ—Å—Ç–∏</a></b>'.format(message.from_user), reply_markup=markup, parse_mode="HTML")
        db.close()

@bot.message_handler(content_types='text')
def message(message):
    db = sqlite3.connect("db.db")
    cursor = db.cursor()
    if message.text == "üÉè | –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É" and message.is_from_offline != True or message.text.lower()[:9] == "/get_card" and message.is_from_offline != True:
        cursor.execute(f"SELECT user_id FROM users WHERE user_id = {message.from_user.id}")
        if cursor.fetchone() == None:
            bot.reply_to(message,
                         f'‚ùó | <b><a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a></b>, —Ç–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∂–¥—ë—Ç —Ç–µ–±—è! –ù–∞–∂–º–∏ <a href="tg://user?id=7808827072">/start</a> –≤ –±–æ—Ç–µ!',
                         parse_mode='HTML')
        else:
           # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
           last_use = cursor.execute(f"SELECT card_await FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
           # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
           data = datetime.date.today()
           date = data.weekday()
           if date >= 5:
               time = 1
           else:
               time = 2
           if str(datetime.datetime.now() - datetime.timedelta(hours=time)) > last_use:
              m = (datetime.datetime.now() + datetime.timedelta(seconds=random.randint(1,60))).strftime("%Y-%m-%d %H:%M:%S.%f")
              cursor.execute(f'UPDATE users SET card_await = "{m}" WHERE user_id = {message.from_user.id};')

              db.commit()
              # –†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã
              x = random.randint(1,100)
              # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
              clan = cursor.execute(f"SELECT clan FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
              kol = cursor.execute(f"SELECT cards_amount, rare, epic, mythic,legend,chrono, card_hand,lucky FROM users WHERE user_id = {message.from_user.id}").fetchone()
              # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
              if x < 1001:
                  t = None
                  y = None
                  r = None
                  # t - —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã
                  # y - –∫–∞—Ä—Ç–∞
                  if kol[7] == 0:
                    if x in rare:
                        r = "rare"
                        t = kol[1]
                        y = random.choice(rare_cards)
                    if x in epic:
                        r = "epic"
                        t = kol[2]
                        y = random.choice(epic_cards)
                    if x in mythic:
                        r = "mythic"
                        t = kol[3]
                        y = random.choice(mythic_cards)
                    if x in legend:
                        r = "legend"
                        t = kol[4]
                        y = random.choice(legend_cards)
                    if x == 1000:
                        r = "chrono"
                        t = kol[5]
                        y = random.choice(chrono_cards)
                  else:
                      if x in rare:
                          r = "epic"
                          t = kol[2]
                          y = random.choice(epic_cards)
                      if x in epic:
                          r = "mythic"
                          t = kol[3]
                          y = random.choice(mythic_cards)
                      if x in mythic:
                          r = "legend"
                          t = kol[4]
                          y = random.choice(legend_cards)
                      if x in legend:
                          r = "chrono"
                          t = kol[5]
                          y = random.choice(chrono_cards)
                      if x == 1000:
                          r = "chrono"
                          t = kol[5]
                          y = random.choice(chrono_cards)
                  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                  try:
                      photo = open(y["path"], 'rb')
                      bot.send_photo(message.chat.id, photo,
                                     caption=f"ü•≥ | –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>! –í–∞–º –≤—ã–ø–∞–ª <b>{y['title']}</b>!\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y['rarity']},\nüéñ–û—Ü–µ–Ω–∫–∞: {y['score']},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y['verse']}\n\n‚è± | –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {time}—á!",parse_mode='HTML')
                      # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–¥
                      if clan != "None":
                          score = cursor.execute(f"SELECT score FROM clans WHERE clan = '{clan}'").fetchone()[0]
                          cursor.execute(f'UPDATE clans SET score = {int(score) + int(y["score"])} WHERE clan = "{clan}"')
                          db.commit()
                      card_hand_list = ((kol[6]).split(" "))
                      if str(y["name"]) in card_hand_list:
                          cursor.execute(f'UPDATE users SET cards_amount = "{int(int(kol[0]) + int(y["score"]))}",{r} = {int(int(t) + 1)}, card_hand = "{kol[6]}" WHERE user_id = {message.from_user.id};')
                          db.commit()
                          db.close()
                      else:
                          cursor.execute(f'UPDATE users SET cards_amount = "{int(int(kol[0]) + int(y["score"]))}",{r} = {int(int(t) + 1)}, card_hand = "{kol[6]} {str(y["name"])}", lucky=0 WHERE user_id = {message.from_user.id};')
                          db.commit()
                          db.close()
                  except Exception as s:
                      m = 0
                      cursor.execute(f'UPDATE users SET card_await = "{m}" WHERE user_id = {message.from_user.id};')
                      db.commit()
                      db.close()
           # –ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–∂–¥–∞–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
           else:
               date_to = (datetime.datetime.strptime(last_use, "%Y-%m-%d %H:%M:%S.%f") + datetime.timedelta(hours=time))
               bot.send_message(message.chat.id,f"‚è∞ | –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ <b>{str(datetime.datetime.strftime(date_to, '%H —á–∞—Å–æ–≤ %M –º–∏–Ω—É—Ç'))} –ø–æ –ú–°–ö</b>!",parse_mode="HTML")

    if message.text == "üìì | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" or message.text.lower()[:10] == "/myprofile":
        #–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        kol = cursor.execute(f"SELECT cards_amount, rare, epic, mythic,legend,chrono FROM users WHERE user_id = {message.from_user.id}").fetchone()
        clan = cursor.execute(f"SELECT clan FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
        #–°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
        randomcit = ["¬´–ú–∞–º–∞ —É—á–∏–ª–∞ –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è –º–∞—Ç–æ–º, –Ω–æ –∂–∏–∑–Ω—å –Ω–∞—É—á–∏–ª–∞ –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è –º–∞—Ç–æ–º –ø—Ä–∏ –º–∞–º–µ¬ª - –ü–∞–≤–µ–ª –î—É—Ä–æ–≤",
                     "¬´–Ø –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä—é —Å–µ–±–µ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–∏—Ç—å, –Ω–æ —è –Ω–µ —Å–ª—É—à–∞—é —Å–æ–≤–µ—Ç—ã –æ—Ç –∞–ª–∫–æ–≥–æ–ª–∏–∫–æ–≤¬ª - –¢—Ä—É–¥–æ–≤–∏–∫",
                     "¬´–î–µ–≤—É—à–∫–∏, –∫–∞–∫ –∫—É–±–∫–∏ –≤ –±—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å, —Ç–æ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ —É—Ö–æ–¥—è—Ç¬ª - ZabWarudo",
                     "¬´–ï—Å—Ç—å –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –Ω–µ –∑–Ω–∞—Ç—å. –ò, —Å—É–¥—è –ø–æ –≤—Å–µ–º—É, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è¬ª - –ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                     "¬´–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–ª, —á—Ç–æ –±—ã –∫—Ç–æ-—Ç–æ —Å—Ç—Ä–æ–π–Ω—ã–π –ø–∏–ª –¥–∏–µ—Ç–∏—á–µ—Å–∫—É—é –∫–æ–ª—É¬ª - –î–æ–Ω–∞–ª—å–¥ –¢—Ä–∞–º–ø",
                     "¬´–õ—É—á—à–µ –±—ã –ø–æ—Ä–Ω—É—Ö–∞ –ø—Ä–∏—Å–Ω–∏–ª–∞—Å—å¬ª - –î–º–∏—Ç—Ä–∏–π –ú–µ–Ω–¥–µ–ª–µ–µ–≤",
                     "¬´–ï—Å–ª–∏ –∂–∏–∑–Ω—å —ç—Ç–æ –≤—ã–∑–æ–≤, —Ç–æ —è –ø–µ—Ä–µ–∑–≤–æ–Ω—é¬ª - –î–∂–µ–π—Å–æ–Ω –°—Ç–µ—Ç—Ö–µ–º",
                     "¬´–ù–µ —Ä—É–≥–∞–π—Ç–µ –ª–µ–Ω–∏–≤—ã—Ö, –æ–Ω–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏¬ª- –ñ–∞–∫ –§—Ä–µ—Å–∫–æ",
                     "¬´–õ—É—á—à–µ –∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–∞, —á–µ–º –∫–æ–Ω–µ—Ü —É —Å–≤–µ—Ç—ã¬ª - –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –õ–µ—Ç–∞—é—â–∏–π –ú—É–∂–∏–∫",
                     "¬´–†–∞–±—ã —Å–∏—Å—Ç–µ–º—ã –ø—å—é—Ç –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º, —Å–≤–æ–±–æ–¥–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±—Ä–∞—â–∞—é—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∞–∫–∏–µ –º–µ–ª–æ—á–∏, –∫–∞–∫ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏¬ª - Sun Xui Vchai",
                     "¬´–†–æ–∑—ã –≤—è–Ω—É—Ç –Ω–∞ –≥–∞–∑–æ–Ω–µ, –ø–∞—Ü–∞–Ω—ã –≤ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–π –∑–æ–Ω–µ¬ª - –ü–∞–≤–µ–ª –î—É—Ä–æ–≤"]
        markap = types.InlineKeyboardMarkup(row_width=1)
        item = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã', callback_data='show')
        item2 = types.InlineKeyboardButton('–í—Å–µ –∫–∞—Ä—Ç—ã', callback_data='show3')
        markap.add(item,item2)
        #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if clan == "None":
            clan = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        if message.chat.type == 'private':
           bot.send_message(message.chat.id, f"üÉè | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤: {kol[0]}\n\nüîµ | –í—ã–ø–∞–ª–æ –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ä—Ç: {kol[1]},\nüü£ | –í—ã–ø–∞–ª–æ —ç–ø–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç: {kol[2]},\nüî¥ | –í—ã–ø–∞–ª–æ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç: {kol[3]},\nüü° | –í—ã–ø–∞–ª–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: {kol[4]},\nüåà | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∞–¥–µ–Ω–∏–π —Ö—Ä–æ–Ω–æ –∫–∞—Ä—Ç: {kol[5]}\n\nüíò | <b>{random.choice(randomcit)}</b>", parse_mode='HTML', reply_markup=markap)
        else:
            bot.reply_to(message,f"üÉè | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤: {kol[0]}\n\nüîµ | –í—ã–ø–∞–ª–æ –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ä—Ç: {kol[1]},\nüü£ | –í—ã–ø–∞–ª–æ —ç–ø–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç: {kol[2]},\nüî¥ | –í—ã–ø–∞–ª–æ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç: {kol[3]},\nüü° | –í—ã–ø–∞–ª–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: {kol[4]},\nüåà | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∞–¥–µ–Ω–∏–π —Ö—Ä–æ–Ω–æ –∫–∞—Ä—Ç: {kol[5]}\n\nüíò | <b>{random.choice(randomcit)}</b>",parse_mode='HTML')
        db.close()
#üèπ | –ö–ª–∞–Ω: {clan}\n
    if message.text == "üòé | –¢–æ–ø –∏–≥—Ä–æ–∫–∏" or message.text.lower()[:8] == "/get_top":
        y = cursor.execute(f"SELECT user_id, cards_amount FROM users ORDER BY cards_amount DESC LIMIT 30").fetchall()
        smile = ["üòé", "‚ú®", "‚ù§", "üåà", "üèπ", "üòç", "üíò", "üíñ", "ü§ó", "üéâ", "üòä", "üåπ", "üéà", "üé®","üéÇ","ü•≥", "üòÉ", "üëè","üéÅ"]
        text = ""
        num = 1
        for x in y:
            text += f'<b>{num}</b>. <a href="tg://openmessage?user_id={x[0]}">{bot.get_chat_member(x[0], x[0]).user.first_name}</a> - <b>{x[1]} –æ—á–∫–æ–≤</b> {random.choice(smile)}\n'
            num += 1
        bot.reply_to(message, text=f'{text}\n<b>–û—á–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 –º–µ—Å—è—Ü–∞. –°–ª–µ–¥—É–π—â–∏–π —Å–±—Ä–æ—Å 29 –º–∞—Ä—Ç–∞</b>',parse_mode='HTML')

    if message.text.lower() == "!—Ç—Ä–µ–π–¥" and message.reply_to_message:
        trade_with = cursor.execute(f"SELECT trade_with FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
        trade_with2 = cursor.execute(f"SELECT trade_with FROM users WHERE user_id = {message.reply_to_message.from_user.id}").fetchone()[0]
        if message.reply_to_message.from_user.id != message.from_user.id:
            if trade_with == "None":
                if trade_with2 == "None":
                    cursor.execute(f"UPDATE users SET trade_with = {message.reply_to_message.from_user.id} WHERE user_id = {message.from_user.id}")
                    cursor.execute(f"UPDATE users SET trade_with = {message.from_user.id} WHERE user_id = {message.reply_to_message.from_user.id}")
                    db.commit()
                    bot.reply_to(message,f"üí¨ | –ú—ã –≤—ã—Å–ª–∞–ª–∏ –≤–∞–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –≤ –ª—Å! –í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞.",parse_mode="HTML")
                    markap = types.InlineKeyboardMarkup(row_width=1)
                    item = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã', callback_data='show2')
                    markap.add(item)
                    bot.send_message(message.from_user.id, f"üèπ | –í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞!", parse_mode='HTML',reply_markup=markap)
                else:
                    bot.reply_to(message, f"‚ùó | –ò–≥—Ä–æ–∫ —É–∂–µ –≤–µ–¥—ë—Ç —Ç—Ä–µ–π–¥ —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º!", parse_mode="HTML")
            else:
                bot.reply_to(message, f"‚ùó | –í—ã —É–∂–µ –≤–µ–¥—ë—Ç–µ —Ç—Ä–µ–π–¥ —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º!", parse_mode="HTML")
        else:
            bot.reply_to(message, f"üò° | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ç—Ä–µ–π–¥–∏—Ç—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")

    if message.text.lower() == "!—Ç—Ä–µ–π–¥ –æ—Ç–º–µ–Ω–∞":

       cl = cursor.execute(f"SELECT trade_with FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]

       if cl != "None":
           bot.reply_to(message, f"üí¨ | –¢—Ä–µ–π–¥ –æ—Ç–º–µ–Ω—ë–Ω")
           cursor.execute(f"UPDATE users SET trade_with = 'None' WHERE user_id = {message.from_user.id}")
           cursor.execute(f"UPDATE users SET trade_with = 'None' WHERE trade_with = {message.from_user.id}")
           db.commit()
           db.close()
       else:
           bot.reply_to(message, f"‚ùó | –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∞")

    if message.text == "üõí | –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω":
        if message.chat.type == 'private':
            tovar = cursor.execute(f"SELECT luckyt,ruletka,second_chance FROM users WHERE user_id = {message.from_user.id}").fetchone()
            markup = types.InlineKeyboardMarkup(row_width=1)
            if str(datetime.datetime.now() - datetime.timedelta(hours=24)) > tovar[2]:
                tv1 = types.InlineKeyboardButton('üëº –í—Ç–æ—Ä–æ–π —à–∞–Ω—Å',callback_data="{\"method\":\"shop\",\"Tv\":\"secondchance\"}")

            else:
                tv1=types.InlineKeyboardButton(f'{datetime.datetime.strftime((datetime.datetime.strptime(tovar[2], "%Y-%m-%d %H:%M:%S.%f")+datetime.timedelta(hours=24)),"%H:%M:%S")}',callback_data="pass")
            if str(datetime.datetime.now() - datetime.timedelta(hours=24)) > tovar[1]:
                tv2 = types.InlineKeyboardButton('üé± –†—É–ª–µ—Ç–∫–∞',callback_data="{\"method\":\"shop\",\"Tv\":\"ruletka\"}")
            else:
                tv2=types.InlineKeyboardButton(f'{datetime.datetime.strftime((datetime.datetime.strptime(tovar[1], "%Y-%m-%d %H:%M:%S.%f")+datetime.timedelta(hours=24)),"%H:%M:%S")}',callback_data="pass")
            if str(datetime.datetime.now() - datetime.timedelta(hours=24)) > tovar[0]:
                tv3 = types.InlineKeyboardButton('üçÄ –£–¥–∞—á–∞', callback_data="{\"method\":\"shop\",\"Tv\":\"lucky\"}")
            else:
                tv3=types.InlineKeyboardButton(f'{datetime.datetime.strftime((datetime.datetime.strptime(tovar[0], "%Y-%m-%d %H:%M:%S.%f")+datetime.timedelta(hours=24)),"%H:%M:%S")}',callback_data="pass")
            markup.add(tv1,tv2,tv3)
            bot.send_message(message.chat.id,"<b>–ü—Ä–∏–≤–µ—Ç!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω üè™ –¢–æ–≤–∞—Ä –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å <b>–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å</b>. –í –∫–∞—á–µ—Å—Ç–≤–µ –≤–∞–ª—é—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—á–∫–∏, –ø–æ–ª—É—á–∞–µ–º—ã–µ —Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç.\n\nüëº –í—Ç–æ—Ä–æ–π —à–∞–Ω—Å - –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è.\n<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 30 –æ—á–∫–æ–≤</b>\n\nüé± –†—É–ª–µ—Ç–∫–∞ - –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç 1 –¥–æ 30 –æ—á–∫–æ–≤.\n<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 15 –æ—á–∫–æ–≤</b>\n\nüçÄ –£–¥–∞—á–∞ - –º–µ–Ω—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π –∫–∞—Ä—Ç, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç <b>1 —Ä–∞–∑</b> –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.\n<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 45 –æ—á–∫–æ–≤</b>\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>",parse_mode="HTML",reply_markup=markup)
            db.close()
#    if message.text.lower()[:5] == "+–∫–ª–∞–Ω":
#        clan = cursor.execute(f"SELECT clan FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
#        card = cursor.execute(f"SELECT cards_amount FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
#        if (message.text.lower()[6:]).replace(" ", "") != "":
#            if clan != "None":
#                bot.reply_to(message, f'üí¨ | –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ - <b>{clan}</b>', parse_mode="HTML")
#            else:
#                if card < 100:
#                    bot.reply_to(message,
#                                 f'‚ùó | <a href = "tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è 100 –æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞',
#                                 parse_mode="HTML")
#                else:
#                    if len(message.text[6:].replace(" ", "")) > 15 or len(
#                            message.text[6:].replace(" ", "")) < 3:
#                        bot.reply_to(message,
#                                     f"‚ùó | –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤")
#                    else:
#                        clan_check = True
#                        try:
#                            clan_name = cursor.execute(f"SELECT clan FROM clans WHERE clan = '{message.text[6:].replace(" ", "")}'").fetchone()[0]
#                            clan_check = False
#                        except:
#                            clan_check = True
#                        if clan_check:
#                           bot.reply_to(message,
#                                        f"üéÇ | <b>–ö–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å —Ç–µ—Å–∫—Ç–æ–º \"+–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\".</b>",
#                                        parse_mode="HTML")
#                           cursor.execute(f"UPDATE users SET clan = '{message.text[6:].replace(" ", "")}' WHERE user_id = {message.from_user.id}")
#                           cursor.execute(f"UPDATE users SET cards_amount = '{card - 100}' WHERE user_id = {message.from_user.id}")
#                           cursor.execute(f"INSERT INTO clans (clan,owner,score,members) VALUES ('{message.text[6:].replace(" ", "")}',{message.from_user.id},{card - 100},{message.from_user.id})")
#                           db.commit()
#                           db.close()
#                        else:
#                           bot.reply_to(message, f"‚ùó | –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
#        else:
#            bot.reply_to(message, "‚ùó | –ü–æ—Å–ª–µ <b>+–∫–ª–∞–Ω</b> –∏–¥—ë—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
#                         parse_mode="HTML")
#
#    if message.text == "-–∫–ª–∞–Ω":
#        clan = cursor.execute(f"SELECT clan FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
#        clan_info = cursor.execute(f"SELECT members FROM clans WHERE clan = '{clan}'").fetchone()[0]
#        clan_info = str(clan_info).split(" ")
#        clan_score = cursor.execute(f"SELECT score FROM clans WHERE clan = '{clan}'").fetchone()[0]
#        card = cursor.execute(f"SELECT cards_amount FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
#        if clan[0] != "None":
#            clan_info.remove(str(message.from_user.id))
#            separator = ' '
#            clan_info = separator.join(clan_info)
#            amount = int(clan_score) - int(card)
#            bot.reply_to(message, f"üéà | <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω</b>", parse_mode="HTML")
#            if clan_info:
#                cursor.execute(f"UPDATE users SET clan = 'None' WHERE user_id={message.from_user.id}")
#                cursor.execute(
#                    f"UPDATE clans SET members = '{clan_info}', score = '{amount}' WHERE clan = '{clan}'")
#                db.commit()
#            else:
#                cursor.execute(f"DELETE FROM clans WHERE clan = '{clan}';")
#                cursor.execute(f"UPDATE users SET clan = 'None' WHERE user_id={message.from_user.id}")
#                db.commit()
#            db.close()
#
#    if message.text.lower() == "+–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ" and message.reply_to_message:
#        if message.chat.type != "private":
#            clan2 = message.reply_to_message.from_user.id
#            clan = cursor.execute(f"SELECT clan FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
#            clan_to = cursor.execute(f"SELECT clan FROM users WHERE user_id = {clan2}").fetchone()[0]
#            if clan == "None":
#                bot.reply_to(message, f'üí¨ | –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞!',
#                             parse_mode="HTML")
#            else:
#                if clan_to != "None":
#                    bot.reply_to(message,f'üí¨ | <a href = "tg://user?id={clan2}">{message.reply_to_message.from_user.first_name}</a> —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ - <b>{clan_to}</b>',parse_mode="HTML")
#                else:
#                    markap = types.InlineKeyboardMarkup(row_width=2)
#                    item = types.InlineKeyboardButton('–î–∞', callback_data="{\"m\":\"ar\",\"Userid\":" + str(message.from_user.id) + ",\"UserTo\":" + str(clan2) + "}")
#                    item2 = types.InlineKeyboardButton('–ù–µ—Ç',callback_data="{\"m\":\"dr\",\"Userid\":" + str(message.from_user.id) + ",\"UserTo\":" + str(clan2) + "}")
#                    markap.add(item, item2)
#                    bot.reply_to(message,f"üéà | <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å <a href = 'tg://user?id={clan2}'>{message.reply_to_message.from_user.first_name}</a> –≤ –∫–ª–∞–Ω?</b>",reply_markup=markap,parse_mode="HTML")
#                    db.commit()
#                    db.close()
#
#    if message.text == "üë• | –ö–ª–∞–Ω" or message.text.lower()[:5] == "/clan":
#        clan = cursor.execute(f"SELECT clan FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
#        if str(clan) == "None":
#            bot.send_message(message.chat.id,
#                             f'–ü—Ä–∏–≤–µ—Ç, <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>!\n<b>–°–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–µ—Ç –∫–ª–∞–Ω–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ</b>, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å 100 –æ—á–∫–æ–≤. –ù–∞–ø–∏—à–∏ <b>"+–∫–ª–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞)"</b> –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–º–Ω–∏ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–ª–∞–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n\n–ß—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω –Ω–∞–ø–∏—à–∏ <b>"-–∫–ª–∞–Ω"</b>.',
#                             parse_mode="HTML")
#        else:
#            members = cursor.execute(f"SELECT members,score,clan,owner FROM clans WHERE clan = '{clan}'").fetchone()
#            users = str(members[0]).split(" ")
#            text = ""
#            num = 1
#            for user in users:
#                if str(user) == str(members[3]):
#                    text += f'<b>{num}</b>. <a href="tg://openmessage?user_id={user}">{bot.get_chat_member(user, user).user.first_name}</a> - <b>–°–æ–∑–¥–∞—Ç–µ–ª—å</b>\n'
#                else:
#                    text += f'<b>{num}</b>. <a href="tg://openmessage?user_id={user}">{bot.get_chat_member(user, user).user.first_name}</a>\n'
#                num += 1
#            markup = types.InlineKeyboardMarkup(types.InlineKeyboardButton('>',callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(page + 1) + ",\"CountPage\":" + str(count) + "}"))
#            bot.send_message(message.chat.id,f'üí¨ –ö–ª–∞–Ω: <b>{clan}</b>\nüîü –û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: <b>{members[1]}</b>\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{text}', parse_mode = "HTML",markup=markap)
#    if message.text.lower()[:14] == "/get_clans_top":
#        y = cursor.execute(f"SELECT score,clan FROM clans ORDER BY score DESC LIMIT 10").fetchall()
#        smile = ["üòé", "‚ú®", "‚ù§", "üåà", "üèπ", "üòç", "üíò", "üíñ", "ü§ó", "üéâ", "üòä", "üåπ", "üéà", "üé®","üéÇ","ü•≥", "üòÉ", "üëè","üéÅ"]
#        text = ""
#        num = 1
#        for x in y:
#            text += f'<b>{num}</b>. <b>{x[1]}</b> - <b>{x[0]} –æ—á–∫–æ–≤</b> {random.choice(smile)}\n'
#            num += 1
#        bot.reply_to(message, text=f'{text}\n<b>–û—á–∫–∏ –∫–ª–∞–Ω–æ–≤ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 –º–µ—Å—è—Ü–∞. –°–ª–µ–¥—É–π—â–∏–π —Å–±—Ä–æ—Å 29 –º–∞—Ä—Ç–∞</b>',parse_mode='HTML')


@bot.callback_query_handler(func = lambda call:True)
def callback(call):
    db = sqlite3.connect("db.db")
    cursor = db.cursor()
    card_hand = cursor.execute(f"SELECT card_hand FROM users WHERE user_id ={call.from_user.id}").fetchone()
    card_hand_list = card_hand[0].split(" ")
    del card_hand_list[0]
    count = len(card_hand_list)
    if call.message:
        if 'shop' in call.data:
            json_string = json.loads((call.data.split("_"))[0])
            tovar = json_string['Tv']
            bot.delete_message(call.message.chat.id, call.message.id)
            score = cursor.execute(f"SELECT cards_amount FROM users WHERE user_id={call.from_user.id}").fetchone()[0]
            if tovar == "secondchance":
                if int(score) >= 30:
                    cursor.execute(f"UPDATE users SET second_chance = '{datetime.datetime.now()}', card_await='0', cards_amount={int(score)-30} WHERE user_id={call.from_user.id}")
                    bot.send_message(call.from_user.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ \"üëº –í—Ç–æ—Ä–æ–π —à–∞–Ω—Å\". –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É!")
                    db.commit()
                    db.close()
                else:
                    bot.send_message(call.from_user.id,f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            if tovar == "ruletka":
                if int(score) >=15:
                    add = random.randint(1,30)
                    cursor.execute(f"UPDATE users SET ruletka = '{datetime.datetime.now()}', cards_amount={(int(score)-15)+add} WHERE user_id={call.from_user.id}")
                    bot.send_message(call.from_user.id,f"–í—ã –∫—É–ø–∏–ª–∏ \"üé± –†—É–ª–µ—Ç–∫–∞\". –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ - {add} –æ—á–∫–æ–≤")
                    db.commit()
                    db.close()
                else:
                    bot.send_message(call.from_user.id,f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            if tovar == "lucky":
                if int(score) >=45:
                    cursor.execute(f"UPDATE users SET luckyt = '{datetime.datetime.now()}', lucky=1, cards_amount={int(score)-45} WHERE user_id={call.from_user.id}")
                    bot.send_message(call.from_user.id,f"–í—ã –∫—É–ø–∏–ª–∏ \"üçÄ –£–¥–∞—á–∞\". –ü—Ä–∏ —Å–ª–µ–¥—É–π—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∞–º –ø–æ–≤–µ–∑—ë—Ç!")
                    db.commit()
                    db.close()
                else:
                    bot.send_message(call.from_user.id,f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
        if 'pagination' in call.data:
            json_string = json.loads((call.data.split("_"))[0])
            page = json_string['NumberPage']
            method = json_string['method']
            markup = types.InlineKeyboardMarkup()
            if method == "pagination":
                if page <= 0:
                    page = 1
                    item2 = types.InlineKeyboardButton('>',
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")

                    markup.add(item3, item2)
                if page > count:
                    page = count
                    item1 = types.InlineKeyboardButton('<',
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page - 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    markup.add(item1, item3)
                elif page == 1:
                    item2 = types.InlineKeyboardButton('>',
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    markup.add(item3, item2)
                elif page == count:
                    item1 = types.InlineKeyboardButton('<',
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page - 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    markup.add(item1, item3)
                else:
                    item1 = types.InlineKeyboardButton('<',
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page - 1) + ",\"CountPage\":" + str(count) + "}")
                    item2 = types.InlineKeyboardButton('>',
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    item7 = types.InlineKeyboardButton("<<<",
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page - 100) + ",\"CountPage\":" + str(count) + "}")
                    item6 = types.InlineKeyboardButton("<<",
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page - 10) + ",\"CountPage\":" + str(count) + "}")
                    item5 = types.InlineKeyboardButton('>>>',
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page + 100) + ",\"CountPage\":" + str(count) + "}")
                    item4 = types.InlineKeyboardButton('>>',
                                                       callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                           page + 10) + ",\"CountPage\":" + str(count) + "}")
                    spisok2 = ""
                    if (int(page) - 100) > 0:
                        spisok2 += "item7 "
                    elif (int(page) - 10) > 0:
                        spisok2 += "item6 "
                    elif (int(page) + 10) < int(count):
                        spisok2 += "item4 "
                    elif (int(page) + 100) < int(count):
                        spisok2 += "item5 "
                    elem = []
                    for el in spisok2.split(" "):
                        if el != '':
                            elem.append(eval(el))
                    markup.add(item1, item3, item2)
                    markup.add(*elem)
                try:
                    y = eval(card_hand_list[page-1].replace(" ", ""))
                    photo = types.InputMediaPhoto(open(y["path"], 'rb'))
                    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.id, media=photo)
                    bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.id,
                                             caption=f"<b>{y['title']}</b>\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y['rarity']},\nüéñ–û—Ü–µ–Ω–∫–∞: {y['score']},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y['verse']}",parse_mode='HTML', reply_markup=markup)
                except:
                    pass
            if method == "paginationt":
                if page <= 0:
                    page = 1
                    item2 = types.InlineKeyboardButton('>',callback_data="{\"method\":\"paginationt\",\"NumberPage\":" + str(page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = "‚úÖ | –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É"
                    item3 = types.InlineKeyboardButton(text=l,callback_data="{\"method\":\"complete\",\"NumberPage\":" + str(page) + "}")
                    markup.add(item3, item2)
                if page > count:
                    page = count
                    item1 = types.InlineKeyboardButton('<',callback_data="{\"method\":\"paginationt\",\"NumberPage\":" + str(page - 1) + ",\"CountPage\":" + str(count) + "}")
                    l = "‚úÖ | –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="{\"method\":\"complete\",\"NumberPage\":" + str(page) + "}")
                    markup.add(item1, item3)
                elif page == 1:
                    item2 = types.InlineKeyboardButton('>',callback_data="{\"method\":\"paginationt\",\"NumberPage\":" + str(page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = "‚úÖ | –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É"
                    item3 = types.InlineKeyboardButton(text=l,callback_data="{\"method\":\"complete\",\"NumberPage\":" + str(page) + "}")
                    markup.add(item3, item2)
                elif page == count:
                    item1 = types.InlineKeyboardButton('<',callback_data="{\"method\":\"paginationt\",\"NumberPage\":" + str(page - 1) + ",\"CountPage\":" + str(count) + "}")
                    l = "‚úÖ | –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É"
                    item3 = types.InlineKeyboardButton(text=l,callback_data="{\"method\":\"complete\",\"NumberPage\":" + str(page) + "}")
                    markup.add(item1, item3)
                else:
                    item1 = types.InlineKeyboardButton('<',callback_data="{\"method\":\"paginationt\",\"NumberPage\":" + str(page - 1) + ",\"CountPage\":" + str(count) + "}")
                    item2 = types.InlineKeyboardButton('>',callback_data="{\"method\":\"paginationt\",\"NumberPage\":" + str(page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = "‚úÖ | –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É"
                    item3 = types.InlineKeyboardButton(text=l,callback_data="{\"method\":\"complete\",\"NumberPage\":" + str(page) + "}")
                    markup.add(item1, item3, item2)
                try:
                    y = eval(card_hand_list[page - 1].replace(" ", ""))
                    photo = types.InputMediaPhoto(open(y["path"], 'rb'))
                    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.id, media=photo)
                    bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.id,
                                             caption=f'<b>{y["title"]}</b>\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y["rarity"]},\nüéñ–û—Ü–µ–Ω–∫–∞: {y["score"]},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y["verse"]}',
                                             parse_mode='HTML', reply_markup=markup)
                except:
                    pass
            if method == "paginationa":
                cards = rare_cards + epic_cards + mythic_cards + legend_cards + chrono_cards
                count = len(cards)
                markup = types.InlineKeyboardMarkup(row_width=7)
                if page <= 0:
                    page = 1
                    item2 = types.InlineKeyboardButton('>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    item4 = types.InlineKeyboardButton('>>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 10) + ",\"CountPage\":" + str(count) + "}")
                    item5 = types.InlineKeyboardButton('>>>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 100) + ",\"CountPage\":" + str(count) + "}")
                    markup.add(item3, item2, item4, item5)
                if page > count:
                    page = count
                    item1 = types.InlineKeyboardButton('<',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    item4 = types.InlineKeyboardButton('<<',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 10) + ",\"CountPage\":" + str(count) + "}")
                    item5 = types.InlineKeyboardButton('<<<',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 100) + ",\"CountPage\":" + str(count) + "}")
                    markup.add(item5, item4, item1, item3)
                elif page == 1:
                    item2 = types.InlineKeyboardButton('>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    item4 = types.InlineKeyboardButton('>>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 10) + ",\"CountPage\":" + str(count) + "}")
                    item5 = types.InlineKeyboardButton('>>>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 100) + ",\"CountPage\":" + str(count) + "}")
                    markup.add(item3, item2, item4, item5)
                elif page == count:
                    item1 = types.InlineKeyboardButton('<',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    item4 = types.InlineKeyboardButton('<<',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 10) + ",\"CountPage\":" + str(count) + "}")
                    item5 = types.InlineKeyboardButton('<<<',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 100) + ",\"CountPage\":" + str(count) + "}")
                    markup.add(item5, item4, item1, item3)
                else:
                    item1 = types.InlineKeyboardButton('<',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 1) + ",\"CountPage\":" + str(count) + "}")
                    item2 = types.InlineKeyboardButton('>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 1) + ",\"CountPage\":" + str(count) + "}")
                    l = f"{page}/{count}"
                    item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                    item7 = types.InlineKeyboardButton("<<<",
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 100) + ",\"CountPage\":" + str(count) + "}")
                    item6 = types.InlineKeyboardButton("<<",
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page - 10) + ",\"CountPage\":" + str(count) + "}")
                    item5 = types.InlineKeyboardButton('>>>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 100) + ",\"CountPage\":" + str(count) + "}")
                    item4 = types.InlineKeyboardButton('>>',
                                                       callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                                                           page + 10) + ",\"CountPage\":" + str(count) + "}")
                    spisok2 = ""
                    if (int(page) - 100) >= 0:
                        spisok2 += "item7 "
                    if (int(page) - 10) >= 0:
                        spisok2 += "item6 "
                    if (int(page) + 10) <= int(count):
                        spisok2 += "item4 "
                    if (int(page) + 100) <= int(count):
                        spisok2 += "item5 "
                    elem = []
                    for el in spisok2.split(" "):
                        if el != '':
                            elem.append(eval(el))
                    markup.add(item1, item3, item2)
                    markup.add(*elem)
                try:
                    y = eval((cards[page - 1])["name"])
                    photo = types.InputMediaPhoto(open(y["path"], 'rb'))
                    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.id, media=photo)
                    if y["name"] in card_hand_list:
                        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.id,
                                                 caption=f'<b>{y["title"]}</b>\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y["rarity"]},\nüéñ–û—Ü–µ–Ω–∫–∞: {y["score"]},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y["verse"]}\n‚úÖ | –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É!',
                                                 parse_mode='HTML', reply_markup=markup)
                    else:
                        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.id,
                                                 caption=f'<b>{y["title"]}</b>\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y["rarity"]},\nüéñ–û—Ü–µ–Ω–∫–∞: {y["score"]},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y["verse"]}\nüò¢ | –í—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É.',
                                                 parse_mode='HTML', reply_markup=markup)
                except:
                    pass
        if call.data == "show":
            if count == 1:
                bot.send_message(call.message.chat.id, "<b>–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –ø–æ–ª—É—á–∏—Ç–µ –¥–≤–µ –∫–∞—Ä—Ç—ã!</b>", parse_mode="HTML")
            else:
                page = 1
                markup = types.InlineKeyboardMarkup(row_width=2)
                item2 = types.InlineKeyboardButton('>', callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(page+1) + ",\"CountPage\":" + str(count) + "}")
                l = f"1/{len(card_hand_list)}"
                item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
                markup.add(item3,item2)
                y = eval(card_hand_list[0])
                m=call.message.chat.id
                photo = open(y["path"], 'rb')
                bot.send_photo(m,photo=photo,caption=f'<b>{y["title"]}</b>\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y["rarity"]},\nüéñ–û—Ü–µ–Ω–∫–∞: {y["score"]},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y["verse"]}', parse_mode="HTML",reply_markup=markup)

        if call.data == "show2":
            if count == 1:
                bot.send_message(call.message.chat.id, "<b>–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –ø–æ–ª—É—á–∏—Ç–µ –¥–≤–µ –∫–∞—Ä—Ç—ã!</b>", parse_mode="HTML")
            else:
                page = 1
                markup = types.InlineKeyboardMarkup(row_width=2)
                item2 = types.InlineKeyboardButton('>', callback_data="{\"method\":\"paginationt\",\"NumberPage\":" + str(page+1) + ",\"CountPage\":" + str(count) + "}")
                l = "‚úÖ | –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É"
                item3 = types.InlineKeyboardButton(text=l, callback_data="{\"method\":\"complete\",\"NumberPage\":" + str(
                                                page) + "}")
                markup.add(item3,item2)
                y = eval(card_hand_list[0])
                m=call.message.chat.id
                photo = open(y["path"], 'rb')
                bot.delete_message(call.message.chat.id,call.message.id)
                bot.send_photo(m,photo=photo,caption=f'<b>{y["title"]}</b>\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y["rarity"]},\nüéñ–û—Ü–µ–Ω–∫–∞: {y["score"]},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y["verse"]}', parse_mode="HTML",reply_markup=markup)
        if "complete" in call.data:
            json_string = json.loads((call.data.split("_"))[0])
            page = json_string['NumberPage']
            y = eval(card_hand_list[page - 1].replace(" ", ""))
            bot.delete_message(call.message.chat.id,call.message.id)
            bot.send_message(call.message.chat.id,f"‚úÖ | –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É –¥–ª—è —Ç—Ä–µ–π–¥–∞!")
            card_hand = cursor.execute(f"SELECT card_hand FROM users WHERE user_id ={call.from_user.id}").fetchone()
            card_hand2 = cursor.execute(f"SELECT card_hand FROM users WHERE trade_with ={call.from_user.id}").fetchone()
            card_handler = cursor.execute(f"SELECT user_id FROM users WHERE trade_with ={call.from_user.id}").fetchone()
            if str(y["name"]) in card_hand2:
                bot.send_message(call.message.chat.id, f"‚ùó | –£ –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ –∫–∞—Ä—Ç–∞")
                cursor.execute(f"UPDATE users SET trade_with = 'None' WHERE user_id = {call.from_user.id}")
                cursor.execute(f"UPDATE users SET trade_with = 'None' WHERE trade_with = {call.from_user.id}")
                db.commit()
                db.close()
            else:
                photo = open(y["path"], 'rb')
                bot.send_photo(card_handler[0],photo=photo, caption=f'ü•≥ | –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–∞—Ä—Ç—É!\n–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–∞: \n<b>{y["title"]}</b>\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y["rarity"]},\nüéñ–û—Ü–µ–Ω–∫–∞: {y["score"]},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y["verse"]}', parse_mode="HTML")
                to_card_rem =  card_hand[0].replace(f'{str(y["name"])}', '')
                to_card_hand = f'{card_hand2[0]} {str(y["name"])}'
                cursor.execute(f"UPDATE users SET card_hand = '{to_card_rem}' WHERE user_id = {call.from_user.id}")
                cursor.execute(f"UPDATE users SET card_hand = '{to_card_hand}' WHERE trade_with = {call.from_user.id}")
                cursor.execute(f"UPDATE users SET trade_with = 'None' WHERE user_id = {call.from_user.id}")
                cursor.execute(f"UPDATE users SET trade_with = 'None' WHERE trade_with = {call.from_user.id}")
                db.commit()
                db.close()
        if call.data == "show3":
             page = 1
             cards = rare_cards + epic_cards + mythic_cards + legend_cards + chrono_cards
             allcards = len(cards)
             markup = types.InlineKeyboardMarkup(row_width=4)
             item2 = types.InlineKeyboardButton('>', callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(page+1) + ",\"CountPage\":" + str(allcards) + "}")
             l = f"1/{allcards}"
             item3 = types.InlineKeyboardButton(text=l, callback_data="pass")
             item4 = types.InlineKeyboardButton('>>', callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                 page + 10) + ",\"CountPage\":" + str(count) + "}")
             item5 = types.InlineKeyboardButton('>>>', callback_data="{\"method\":\"paginationa\",\"NumberPage\":" + str(
                 page + 100) + ",\"CountPage\":" + str(count) + "}")
             markup.add(item3,item2, item4,item5)
             y = eval((cards[0])["name"])
             m=call.message.chat.id
             photo = open(y["path"], 'rb')
             bot.delete_message(call.message.chat.id,call.message.id)
             bot.send_photo(m,photo=photo,caption=f'<b>{y["title"]}</b>\n\nüíç–†–µ–¥–∫–æ—Å—Ç—å: {y["rarity"]},\nüéñ–û—Ü–µ–Ω–∫–∞: {y["score"]},\nüåç–í—Å–µ–ª–µ–Ω–Ω–∞—è: {y["verse"]}', parse_mode="HTML",reply_markup=markup)

        if "ar" in call.data:
            json_string = json.loads((call.data.split("_"))[0])
            user_id = json_string['Userid']
            user_to = json_string["UserTo"]
            if call.from_user.id == user_id:
                bot.delete_message(call.message.chat.id,call.message.id)
                markap = types.InlineKeyboardMarkup(row_width=2)
                clan_r = cursor.execute(f"SELECT clan FROM users WHERE user_id = {user_id}").fetchone()[0]
                markap.add(types.InlineKeyboardButton('–î–∞', callback_data="{\"m\":\"acc\",\"Userid\":" + str(user_to) + ",\"Clan\":" + f"\"{str(clan_r)}\"" + "}"), types.InlineKeyboardButton('–ù–µ—Ç', callback_data="{\"m\":\"den\",\"Userid\":" + str(user_to) + ",\"Clan\":" + f'\"{str(clan_r)}\"' + "}"))
                bot.send_message(call.message.chat.id, f'<a href="tg://user?id={user_to}">{bot.get_chat_member(user_to, user_to).user.first_name}</a>, —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–ª–∞–Ω <b>{clan_r}</b>! –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ?',parse_mode="HTML",reply_markup=markap)
                db.close()
        if "dr" in call.data:
            json_string = json.loads((call.data.split("_"))[0])
            user_id = json_string['Userid']
            if call.from_user.id == user_id:
                bot.delete_message(call.message.chat.id, call.message.id)
        if "acc" in call.data:
            json_string = json.loads((call.data.split("_"))[0])
            user_id = json_string['Userid']
            clan = json_string['Clan']
            if call.from_user.id == user_id:
                bot.send_message(call.message.chat.id,f'<a href="tg://user?id={user_id}">{bot.get_chat_member(user_id, user_id).user.first_name}</a>, —Ç—ã –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!',parse_mode="HTML")
                clan_info = cursor.execute(f"SELECT members FROM clans WHERE clan = '{str(clan)}'").fetchone()[0]
                card = cursor.execute(f"SELECT cards_amount FROM users WHERE user_id = {int(user_id)}").fetchone()[0]
                clan_score = cursor.execute(f"SELECT score FROM clans WHERE clan = '{clan}'").fetchone()[0]
                amount = int(card) + int(clan_score)
                clan_info = f"{clan_info} {user_id}"
                cursor.execute(f"UPDATE users SET clan = '{clan}' WHERE user_id = {user_id}")
                db.commit()
                cursor.execute(f"UPDATE clans SET members = '{clan_info}', score = '{amount}' WHERE clan = '{clan}'")
                db.commit()
                db.close()
                bot.delete_message(call.message.chat.id, call.message.id)

        if "den" in call.data:
            json_string = json.loads((call.data.split("_"))[0])
            user_id = json_string['Userid']
            if call.from_user.id == user_id:
                bot.delete_message(call.message.chat.id, call.message.id)
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as x:
        print(x)